<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>G-talk</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jguang.top/"/>
  <updated>2016-07-05T16:11:32.000Z</updated>
  <id>http://jguang.top/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IOS初学记录-古老的OC</title>
    <link href="http://jguang.top/2016/07/04/ios%E5%88%9D%E5%AD%A6%E8%AE%B0%E5%BD%95-%E5%8F%A4%E8%80%81%E7%9A%84%20OC/"/>
    <id>http://jguang.top/2016/07/04/ios初学记录-古老的 OC/</id>
    <published>2016-07-03T16:00:00.000Z</published>
    <updated>2016-07-05T16:11:32.000Z</updated>
    
    <content type="html">&lt;p&gt;以前折腾过一阵IOS给停止了，最近因要了解Rect-Native重新学习下，希望这次能坚持&lt;/p&gt;
&lt;h2 id=&quot;疑惑：认识&quot;&gt;&lt;a href=&quot;#疑惑：认识&quot; class=&quot;headerlink&quot; title=&quot;疑惑：认识&quot;&gt;&lt;/a&gt;疑惑：认识&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;消息： Objective-C 调用其类的方法称为起发送&lt;code&gt;消息&lt;/code&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;「@」符号： 起到编译标识的作用；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;『+』： 类的静态方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;『-』： 类的所属方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;『NSXXX』：是个曾经是NextStep 公司的时候开发的库，oc 编译是个平级函数资源，为防止重复采用前缀区别对待&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ORC: Automatic Reference Counting 就是代码中自动加入了retain/release &lt;a href=&quot;http://www.yifeiyang.net/development-of-the-iphone-simply-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.yifeiyang.net/development-of-the-iphone-simply-1/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;疑惑-类的方法&quot;&gt;&lt;a href=&quot;#疑惑-类的方法&quot; class=&quot;headerlink&quot; title=&quot;疑惑: 类的方法&quot;&gt;&lt;/a&gt;疑惑: 类的方法&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Person.m&lt;/code&gt;文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@interface Person : NSObject &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int width;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int height;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@property int age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Person.h&lt;/code&gt; w文件&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#import &amp;quot;Person.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@implementation Person &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    int baidu;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (Person*)init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    width = 100;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _age = 10;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self-&amp;gt;baidu = 100000;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self-&amp;gt;_age = 100;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    self.age = 10000;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return self;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (NSString*)description&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&amp;quot;%d,%d, %d&amp;quot;, width, height, self-&amp;gt;baidu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return @&amp;quot;aaaaaaaaaa&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (void)add&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&amp;quot;this age is %d&amp;quot;, self.age);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;@property&lt;/code&gt; 是声明了属性，具有了set和get方法，可以采用&lt;code&gt;.&lt;/code&gt;来操作，其属性命名为&lt;code&gt;_名字&lt;/code&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方法中类属性可以省略 self, 属性直接声明是在其{}中&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;疑惑：类中的方法&quot;&gt;&lt;a href=&quot;#疑惑：类中的方法&quot; class=&quot;headerlink&quot; title=&quot;疑惑：类中的方法&quot;&gt;&lt;/a&gt;疑惑：类中的方法&lt;/h2&gt;&lt;p&gt;定义&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-/+ (返回类型) 方法名: (参数1类型) 形参1  参数2描述: (参数2类型) 形参2 参数3描述: (参数3类型) 形参3 .......&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;调用&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[object 方法名:参数1 参数描述2:参数2 ...];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;OC 中 方法名可以作为参数1的描述，方法的所有描述构成一个完整的方法，只有描述不同其方法可认为是不同的；&lt;/p&gt;
&lt;p&gt;如下面是错误的，方法重复&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (NSString) initWithAdd:(int) arg1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (NSString) initWithAdd: (float) arg2;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其下面是 ok 的：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    - (NSString) initWithAdd:(int) arg1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    - (NSString) initWithAdd:(int) arg1 second:(float) arg2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;`&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;疑惑：接口、Block、Category&quot;&gt;&lt;a href=&quot;#疑惑：接口、Block、Category&quot; class=&quot;headerlink&quot; title=&quot;疑惑：接口、Block、Category&quot;&gt;&lt;/a&gt;疑惑：接口、Block、Category&lt;/h2&gt;&lt;h3 id=&quot;接口&quot;&gt;&lt;a href=&quot;#接口&quot; class=&quot;headerlink&quot; title=&quot;接口&quot;&gt;&lt;/a&gt;接口&lt;/h3&gt;&lt;p&gt;oc没有严格的接口定义，采用@protocol 去约束类的方法；@optional不强制实现，@required表必须实现, NS 库中多数类为接口如 NSObject, UIApplicationDelegate&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@protocol AnimalDelegate &amp;lt;NSObject&amp;gt; //AnimalDelegate扩展语 NSObject协议&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@required //必须实现的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void)eat;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@optional //可选实现的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void)run;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void)say;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-(void)sleep;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Block&quot;&gt;&lt;a href=&quot;#Block&quot; class=&quot;headerlink&quot; title=&quot;Block&quot;&gt;&lt;/a&gt;Block&lt;/h3&gt;&lt;p&gt;可以作为匿名函数来理解, 作为类的属性定义&lt;/p&gt;
&lt;p&gt;定义&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@property (nonatomic,copy) void(^ onClick)(KCButton *);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实现&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;KCButton *button=[[KCButton alloc]init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;button.onClick=^(KCButton *btn)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    NSLog(@&amp;quot;Invoke onClick method.The button is:%@.&amp;quot;,btn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Category分类&quot;&gt;&lt;a href=&quot;#Category分类&quot; class=&quot;headerlink&quot; title=&quot;Category分类&quot;&gt;&lt;/a&gt;Category分类&lt;/h3&gt;&lt;p&gt;如果对已有类进行扩展可采用继承或者此分类的形式, 如扩展 NSString 类&lt;br&gt;参考：&lt;a href=&quot;http://blog.csdn.net/yhawaii/article/details/6992094&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/yhawaii/article/details/6992094&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;IOS生命周期&quot;&gt;&lt;a href=&quot;#IOS生命周期&quot; class=&quot;headerlink&quot; title=&quot;IOS生命周期&quot;&gt;&lt;/a&gt;IOS生命周期&lt;/h2&gt;&lt;p&gt;IOS 运行是代理、委托或者过程，中间经过层层事件传递, 继承与UIApplicationDelegate接口，生命函数大概如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no runting -&amp;gt; inactive -&amp;gt; active&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;application:didFinishLaunchingWithOptions -&amp;gt; applicationDidBecomeActive&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;切换到其他app, active -&amp;gt; inactive -&amp;gt;  background&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;applicationDidBecomeActive -&amp;gt; applicationWillResignActive -&amp;gt;applicationDidEnterBackground&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从其他 app 切换回来, background -&amp;gt; inactive -&amp;gt; active&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;applicationDidEnterBackground -&amp;gt; applicationWillEnterForeground -&amp;gt;  applicationDidBecomeActive&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;锁屏 active -&amp;gt; inactive -&amp;gt; background&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;applicationDidBecomeActive -&amp;gt; applicationWillResignActive -&amp;gt; applicationDidEnterBackground&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;异常终止 end&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;applicationWillTerminate&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.devtalking.com/articles/you-should-to-know-property/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.devtalking.com/articles/you-should-to-know-property/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;《Objective 编程》&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;以前折腾过一阵IOS给停止了，最近因要了解Rect-Native重新学习下，希望这次能坚持&lt;/p&gt;
&lt;h2 id=&quot;疑惑：认识&quot;&gt;&lt;a href=&quot;#疑惑：认识&quot; class=&quot;headerlink&quot; title=&quot;疑惑：认识&quot;&gt;&lt;/a&gt;疑惑：认识&lt;/h2&gt;&lt;ul&gt;
&lt;li
    
    </summary>
    
      <category term="技术" scheme="http://jguang.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>瞎逼逼下什么是好产品</title>
    <link href="http://jguang.top/2016/06/24/%E5%85%B3%E4%BA%8E%E4%BA%A7%E5%93%81%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://jguang.top/2016/06/24/关于产品的思考/</id>
    <published>2016-06-23T16:00:00.000Z</published>
    <updated>2016-07-05T16:27:30.000Z</updated>
    
    <content type="html">&lt;p&gt;对，就是瞎逼逼下, 我又不懂产品。&lt;/p&gt;
&lt;p&gt;一直对『这是一个没有成果就没有正面评价的严峻时代』这句话记忆深刻，特别是狼厂这句话是最好的证明。&lt;/p&gt;
&lt;p&gt;腾讯创造出了微信使其链接一切，改变了很多人对其的想法，&lt;/p&gt;
&lt;p&gt;阿里巴巴为了更有其成就不断收购和法力其他业务，变成了阿里帝国，&lt;/p&gt;
&lt;p&gt;反观百度，这几年出来什么了？？？？？？&lt;/p&gt;
&lt;p&gt;于是趴着思考，什么是好的产品？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/cp1.jpg&quot; alt=&quot;cp&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;人发挥创造力解决了现有问题或者矛盾便产生了价值，此发挥创造力出来的东西便是产品，但要想持续产生价值或者产生真正到手的价值必须到一定规模，用规模去建立竞争的围墙；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果有人在继续在其他人已有规模的产品上模仿，可能使自己有了价值，但对现有的矛盾没有任何解决之道即没有实际创造力；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;反观，需继续发挥其他创造力，解决现有产品的其他矛盾让后用规模形成大的价值，持续回到1；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;…..，算了， 不逼逼了~~&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;对，就是瞎逼逼下, 我又不懂产品。&lt;/p&gt;
&lt;p&gt;一直对『这是一个没有成果就没有正面评价的严峻时代』这句话记忆深刻，特别是狼厂这句话是最好的证明。&lt;/p&gt;
&lt;p&gt;腾讯创造出了微信使其链接一切，改变了很多人对其的想法，&lt;/p&gt;
&lt;p&gt;阿里巴巴为了更有其成就不断收购和法力其他业
    
    </summary>
    
      <category term="产品" scheme="http://jguang.top/categories/%E4%BA%A7%E5%93%81/"/>
    
    
  </entry>
  
  <entry>
    <title>15种方式给javascript代码变为self-documenting</title>
    <link href="http://jguang.top/2016/06/22/%5B%E7%BF%BB%E8%AF%91%5D%20JS-self-document/"/>
    <id>http://jguang.top/2016/06/22/[翻译] JS-self-document/</id>
    <published>2016-06-21T16:00:00.000Z</published>
    <updated>2016-07-04T07:00:56.000Z</updated>
    
    <content type="html">&lt;p&gt;原文:&lt;a href=&quot;https://www.sitepoint.com/self-documenting-javascript/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.sitepoint.com/self-documenting-javascript/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近再捡起来重新学习英文，看英文技术文档，看到这篇感觉比较容易试着翻译下。&lt;/p&gt;
&lt;p&gt;作者: Jani Hartikainen&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Jani has built all kinds of JS apps for more than 15 years. At his blog, he helps JavaScript developers learn to eliminate bad code so they can focus on writing awesome apps and solve real problems.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Jani有超过15年的经验为不同类型的JS应用;在他的博客上，他帮助js开发者学习怎么去避免糟糕的代码使其聚焦于开发出卓越的应用，并解决真实的问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It’s an easy mistake to make: you change some code, and forget to remove or update the comment. A bad comment won’t break your code, but imagine what would happen when debugging. You read the comment. It says one thing, while the code does another. You’ll probably end up wasting time figuring it out, and in the worst case, it might even mislead you!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是一个容易犯的错误：你改变一些代码，而忘记删除或更新注释。错误注释不影响代码逻辑，但想一下，在调试的时候会发生什么。你读了注释。它说的是一个结果，而代码执行的是另一个结果。你可能最终会浪费时间想出来的，而在最坏的情况下可能会误导你！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But writing code with zero comments isn’t an option. In my more than 15 years of programming experience, I’ve never seen a codebase where comments were completely unnecessary.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但零注释写代码是不是一种选择。在我15年以上的编程经验，我从来没有见过一个代码库，注释是完全无用的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;However, there are ways to reduce the need for comments. We can make use of certain coding techniques to clarify our code, simply by using the programming language’s features to our advantage.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然而，有一些方法，以减少注释的必要性。 我们可以规范编码来阐明代码用处，只需使用的编程语言的特性给我们发挥优势。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Not only does this help make our code easier to understand, it can also help improve the design of the program overall!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不仅能使我们能容易理解代码，他也能帮助我们提高我们程序的总体设计。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This type of code is often called self documenting. Let me show you how you can take this approach to coding right now. While the examples I’ll present here are in JavaScript, you can apply most of the techniques in other languages as well.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这种目的规范代码通常被叫做(self-documenting)自带注释, 让我展示给你如何让你的代码接近这个目的，在这儿我将要用 js 去作为例子，你也能延伸到其他语言代码。&lt;/p&gt;
&lt;h2 id=&quot;Overview-of-Techniques-技术概述&quot;&gt;&lt;a href=&quot;#Overview-of-Techniques-技术概述&quot; class=&quot;headerlink&quot; title=&quot;Overview of Techniques 技术概述&quot;&gt;&lt;/a&gt;Overview of Techniques 技术概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Some programmers include comments as part of self-documenting code. In this article, we’ll only focus on code. Comments are important, but they’re a large topic to be covered separately.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一些程序包括代码注释部分也是 self-documeting 代码的一部分，在这个文档中我们聚焦于代码，注释也是很重要的它是个大的课题单独去研究。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We can split the techniques for self-documenting code into three broad categories:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们把 self-documenting技术方案分成了三个主题，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;structural, where the structure of code or directories is used to clarify the purpose&lt;br&gt;  naming related, such as function or variable naming&lt;br&gt;  syntax related, where we make use of (or avoid using) features of the language to clarify code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;结构: 清晰的代码或者目录的结构来达到目的&lt;br&gt;命名：函数或者变量命名&lt;br&gt;语法: 能使用或者避免使用一些语言特性来达到目的&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Many of these are simple on paper. The challenge comes from knowing when to use what technique. I’ll show you some practical examples as we tackle each one.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;纸上谈兵终觉浅，这最大的挑战是知道什么时候用什么技术，我将要展示些实际例子以便我们解决每个问题。&lt;/p&gt;
&lt;h2 id=&quot;Structural-结构&quot;&gt;&lt;a href=&quot;#Structural-结构&quot; class=&quot;headerlink&quot; title=&quot;Structural 结构&quot;&gt;&lt;/a&gt;Structural 结构&lt;/h2&gt;&lt;p&gt;First, let’s look at the structural category. Structural changes refer to shifting code around for enhanced clarity.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Move code into a function&lt;br&gt;  This is the same as the “extract function” refactoring — meaning that we take existing code and move it into a new function: we “extract” the code out into a new function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;移动代码进入函数内&lt;/p&gt;
&lt;p&gt;这是相同的和『extract function』-意思是把已经存在的代码进入个新的函数内；&lt;/p&gt;
&lt;p&gt;试着去猜下面这一行是干什么的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var width = (value - 0.5) * 16;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;Not very clear; a comment here could be quite useful. Or, we could extract a function to make it self documenting:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不是非常清楚，一个注释在这儿应该或者『extract function』提取函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var width = emToPixels(value);

function emToPixels(ems) {
    return (ems - 0.5) * 16;
}
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;The only change was I moved the calculation into a function. The function’s name is descriptive of what it does, so the code no longer needs clarification. As an additional benefit, we now have a useful helper function that you can use elsewhere, so this method also helps reduce duplication.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们仅有的改变是我把计算移动到了一个函数内，这函数的名字描述它是干什么的，由此代码也不需要怎么注释了。还有个额外好处，这函数可以再其他地方调用从而减少代码重复。&lt;/p&gt;
&lt;h2 id=&quot;Replace-conditional-expression-with-function-用函数代替条件表达式&quot;&gt;&lt;a href=&quot;#Replace-conditional-expression-with-function-用函数代替条件表达式&quot; class=&quot;headerlink&quot; title=&quot;Replace conditional expression with function 用函数代替条件表达式&quot;&gt;&lt;/a&gt;Replace conditional expression with function 用函数代替条件表达式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;If clauses with multiple operands can often be hard to understand without a comment. We can apply a similar method as above to clarify them:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果没有注释，多个条件表达式是很难理解的我们可以用上面相似的方式使其看起来更明白&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if(!el.offsetWidth || !el.offsetHeight) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面条件的目的是什么？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function isVisible(el) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return el.offsetWidth &amp;amp;&amp;amp; el.offsetHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if(!isVisible(el)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;Again, we moved the code into a function and the code is immediately much easier to understand.&lt;br&gt;同样，我们把代码移动到函数中立即看起来更加容易理解了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Replace-expression-with-variable-用变量代替表达式&quot;&gt;&lt;a href=&quot;#Replace-expression-with-variable-用变量代替表达式&quot; class=&quot;headerlink&quot; title=&quot;Replace expression with variable 用变量代替表达式&quot;&gt;&lt;/a&gt;Replace expression with variable 用变量代替表达式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Replacing something with a variable is similar to moving code into a function, but instead of a function, we simply use a variable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用变量代替一些语句是相似的同把代码移动到一个函数中，但是作为函数的替代品变量更简单。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Let’s take a look at the example with if clauses again:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;再让我们看这个条件语句&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!el.offsetWidth || !el.offsetHeight) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;Instead of extracting a function, we can also clarify this by introducing a variable:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为函数的替代品引人个变量&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isVisible = el.offsetWidth &amp;amp;&amp;amp; el.offsetHeight;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!isVisible) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This can be a better choice than extracting a function — for example, when the logic you want to clarify is very specific to a certain algorithm used only in one place.&lt;/p&gt;
&lt;p&gt;The most common use for this method is mathematical expressions:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这可能是更好的选择比引人函数，再一些仅仅使用一次的逻辑代码中；&lt;/p&gt;
&lt;p&gt;最常用的方法是数学表达式&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a * b + (c / d);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;We can clarify the above by splitting the calculation:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们可以拆分如下表达式：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; multiplier = a * b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; divisor = c / d;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; multiplier + divisor;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;Because I’m terrible at math, imagine the above example has some meaningful algorithm. In any case, the point is that you can move complex expressions into variables that add meaning to otherwise hard-to-understand code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为我讨厌数学，无法想象上面的例子是什么意思无论任何情况，这问题是你可以把复杂的表达式移动到一个变量意味着用其他方式理解代码。&lt;/p&gt;
&lt;h2 id=&quot;Class-and-module-interfaces类和模块接口&quot;&gt;&lt;a href=&quot;#Class-and-module-interfaces类和模块接口&quot; class=&quot;headerlink&quot; title=&quot;Class and module interfaces类和模块接口&quot;&gt;&lt;/a&gt;Class and module interfaces类和模块接口&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;The interface — that is, the public methods and properties — of a class or module can act as documentation on its usage.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接口 - 即按照使用文档可以使用的类或者模块的公共方法和属性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Let’s look at an example:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;让我们来看一个例子。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Box&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setState(state) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state = state;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getState() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;This class could contain some other code in it as well. I purposely kept the example simple, to illustrate how the public interface is documentation&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个类另外还包含了一些其他代码。我特意保留了简单的例子，来说明公共接口就是文档&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can you tell how this class should be used? Maybe with a little bit of work, but it isn’t very obvious.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你可以告诉这个类应该怎么使用？可能使用中有点思路，但不是非常肯定&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Both of the functions have reasonable names: what they do is clear from their name. But despite this, it’s not very clear how you should be using them. Most likely you would need to read more code or the documentation for the class to figure it out.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这两个函数又合适的名字，从他们的名字我们清楚的知道是干什么的但尽管这样，我们还不是真清楚应该如何使用他们，最有可能的，你将需要更多代码或弄明白的文档类。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What if we changed it to something like this:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果我们把它改成这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Box&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    open() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state = &lt;span class=&quot;string&quot;&gt;&#39;open&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    close() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state = &lt;span class=&quot;string&quot;&gt;&#39;closed&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    isOpen() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state === &lt;span class=&quot;string&quot;&gt;&#39;open&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;Much easier to see the usage, don’t you think? Notice that we only changed the public interface; the internal representation is still the same with the this.state property.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看使用容易得多，你不觉得吗？请注意，我们不仅改变了公共接口;内部表示仍是相同和this.state属性。&lt;/p&gt;
&lt;p&gt;Now you can tell at a glance how the Box class is used. This shows that even though the first version had good names in the functions, the complete package was still confusing, and how, with simple decisions like this, you can have a very big impact. You always have to think of the big picture.&lt;/p&gt;
&lt;p&gt;现在，你可以一目了然告诉Box类如何使用。这表明，即使第一个版本曾有表达功能好的名字，完整的方案仍然扑朔迷离，如果像如何像这样简单的决策，你可以有非常大的效果。你通常不得不要思考大的范围；&lt;/p&gt;
&lt;p&gt;##Code grouping 代码分组&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Grouping different parts of code can also act as a form of documentation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代码分组也可以作为文档的一部分&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For example, you should always aim to declare your variables as close to where they are being used as possible, and try to group variable uses together.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如，应该尽量把变量声明接近使用，试着按照使用去分组变量；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This can be used to indicate a relationship between the different parts of the code, so that anyone changing it in the future has an easier time finding which parts they may also need to touch.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样就暗示了代码不同部分直接的关系，将来改变的时候可以和容易的找到&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Consider the following example:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;思考下面的例子&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var foo = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blah()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xyz();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bar(foo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;baz(1337);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;quux(foo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Can you see at a glance how many times foo was used? Compare it to this:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var foo = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bar(foo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;quux(foo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blah()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xyz();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;baz(1337);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;With all the uses of foo grouped together, we can easily see which parts of the code depend on it.&lt;br&gt;用&lt;code&gt;foo&lt;/code&gt;的分到一个单元内，我们能很容易的看到那个代码依赖于它&lt;/p&gt;
&lt;h2 id=&quot;Use-pure-functions-使用纯函数&quot;&gt;&lt;a href=&quot;#Use-pure-functions-使用纯函数&quot; class=&quot;headerlink&quot; title=&quot;Use pure functions 使用纯函数&quot;&gt;&lt;/a&gt;Use pure functions 使用纯函数&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Pure functions are much easier to understand than functions that rely on state.&lt;br&gt;纯函数更容易理解比依赖性函数&lt;/p&gt;
&lt;p&gt;What is a pure function? When calling a function with the same parameters, if it always produces the same output, it’s most likely a so-called “pure” function. This means the function should not have any side effects or rely on state — such as time, object properties, Ajax, etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什么是纯函数？ 它类似于输出类似的参数，通常又相同的输出的『pure』函数。也就意味着此函数不能又其他反馈或者依赖一些状态日时间，对象属性或者ajax等等；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;These types of functions are easier to understand, as any values affecting their output are passed in explicitly. You won’t have to dig around to figure out where something comes from, or what affects the result, as it’s all in plain sight.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Another reason these types of functions make for more self-documenting code is you can trust their output. No matter what, the function will always return output only based on what parameters you give it. It also won’t affect anything external, so you can trust it won’t cause an unexpected side effect.&lt;/p&gt;
&lt;p&gt;A good example of where this goes wrong is document.write(). Experienced JS developers know you shouldn’t use it, but many beginners stumble with it. Sometimes it works well — but other times, in certain circumstances, it can wipe the whole page clean. Talk about a side effect!&lt;/p&gt;
&lt;p&gt;For a better overview of what a pure function is, see the article Functional Programming: Pure Functions.&lt;/p&gt;
&lt;p&gt;Directory and file structure&lt;br&gt;When naming files or directories, follow the same naming convention as used in the project. If there’s no clear convention in the project, follow the standard for your language of choice.&lt;/p&gt;
&lt;p&gt;For example, if you’re adding new UI-related code, find where similar functionality is in the project. If UI-related code is placed in src/ui/, you should do the same.&lt;/p&gt;
&lt;p&gt;This makes it easier to find the code and shows its purpose, based on what you already know about the other pieces of code in the project. All UI code is in the same place, after all, so it must be UI related.&lt;/p&gt;
&lt;p&gt;Naming&lt;br&gt;There’s a popular quote about the two hard things in computer science:&lt;/p&gt;
&lt;p&gt;There are only two hard things in Computer Science: cache invalidation and naming things. — Phil Karlton&lt;br&gt;So let’s take a look at how we can use naming things to make our code self documenting.&lt;/p&gt;
&lt;p&gt;Rename function&lt;br&gt;Function naming is often not too difficult, but there’s some simple rules that you can follow:&lt;/p&gt;
&lt;p&gt;Avoid using vague words like “handle” or “manage”: handleLinks(), manageObjects(). What do either of these do?&lt;br&gt;Use active verbs: cutGrass(), sendFile() — functions that actively perform something.&lt;br&gt;Indicate return value: getMagicBullet(), readFile(). This is not something you can always do, but it’s helpful where it makes sense.&lt;br&gt;Languages with strong typing can use type signatures to help indicate return values as well.&lt;br&gt;Rename variable&lt;br&gt;With variables, here are two good rules of thumb:&lt;/p&gt;
&lt;p&gt;Indicate units: if you have numeric parameters, you can include the expected unit. For example, widthPx instead of width to indicate the value is in pixels instead of some other unit.&lt;br&gt;Don’t use shortcuts: a or b are not acceptable names, except for counters in loops.&lt;br&gt;Follow established naming conventions&lt;br&gt;Try to follow the same naming conventions in your code. For example, if you have an object of a specific type, call it the same name:&lt;/p&gt;
&lt;p&gt;var element = getElement();&lt;br&gt;Don’t suddenly decide to call it a node:&lt;/p&gt;
&lt;p&gt;var node = getElement();&lt;br&gt;If you follow the same conventions as elsewhere in the codebase, anyone reading it can make safe assumptions about the meanings of things based on what it means elsewhere.&lt;/p&gt;
&lt;p&gt;Use meaningful errors&lt;br&gt;Undefined is not an object!&lt;/p&gt;
&lt;p&gt;Everyone’s favorite. Let’s not follow JavaScript’s example, and let’s make sure any errors our code throws have a meaningful message in them.&lt;/p&gt;
&lt;p&gt;What makes an error message meaningful?&lt;/p&gt;
&lt;p&gt;it should describe what the problem was&lt;br&gt;if possible, it should include any variable values or other data which caused the error&lt;br&gt;key point: the error should help us find out what went wrong — therefore acting as documentation on how the function should work.&lt;br&gt;Syntax&lt;br&gt;Syntax-related methods for self-documenting code can be a little bit more language specific. For example, Ruby and Perl allow you to do all kinds of strange syntax tricks, which, in general, should be avoided.&lt;/p&gt;
&lt;p&gt;Let’s take a look at a few that happen with JavaScript.&lt;/p&gt;
&lt;p&gt;Don’t use syntax tricks&lt;br&gt;Don’t use strange tricks. Here’s a good way to confuse people:&lt;/p&gt;
&lt;p&gt;imTricky &amp;amp;&amp;amp; doMagic();&lt;br&gt;It’s equivalent to this much more sane looking code:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;if(imTricky) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    doMagic();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Always prefer the latter form. Syntax tricks are not going to do anyone any favors.&lt;/p&gt;
&lt;p&gt;Use named constants, avoid magic values&lt;br&gt;If you have special values in your code — such as numbers or string values — consider using a constant instead. Even if it seems clear now, more often than not, when coming back to it in a month or two, nobody will have any idea why that particular number was put there.&lt;/p&gt;
&lt;p&gt;const MEANING_OF_LIFE = 42;&lt;br&gt;(If you’re not using ES6, you can use a var and it’ll work equally well.)&lt;/p&gt;
&lt;p&gt;Avoid boolean flags&lt;br&gt;Boolean flags can make for hard-to-understand code. Consider this:&lt;/p&gt;
&lt;p&gt;myThing.setData({ x: 1 }, true);&lt;br&gt;What is the meaning of true? You have absolutely no idea, unless you dig into the source for setData() and find out.&lt;/p&gt;
&lt;p&gt;Instead, you can add another function, or rename an existing function:&lt;/p&gt;
&lt;p&gt;myThing.mergeData({ x: 1 });&lt;br&gt;Now you can immediately tell what’s going on.&lt;/p&gt;
&lt;p&gt;Use language features to your advantage&lt;br&gt;We can even use some features of our chosen language to better communicate the intention behind some code.&lt;/p&gt;
&lt;p&gt;A good example of this in JavaScript are the array iteration methods:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var ids = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;for(var i = 0; i &amp;lt; things.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ids.push(things[i].id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The above code collects a list of IDs into a new array. However, in order to know that, we need to read the whole body of the loop. Compare it with using map():&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var ids = things.map(function(thing) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return thing.id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;In this case, we immediately know that this produces a new array of something, because that’s the purpose of map(). This can be beneficial especially if you have more complicated looping logic. There’s a list of other iteration functions on MDN.&lt;/p&gt;
&lt;p&gt;Another example with JavaScript is the const keyword.&lt;/p&gt;
&lt;p&gt;Often, you declare variables where the value is supposed to never change. A very common example is when loading modules with CommonJS:&lt;/p&gt;
&lt;p&gt;var async = require(‘async’);&lt;br&gt;We can make the intention of never changing this even more clear:&lt;/p&gt;
&lt;p&gt;const async = require(‘async’);&lt;br&gt;As an added benefit, if someone ever accidentally tries to change this, we’ll now get an error.&lt;/p&gt;
&lt;p&gt;Anti-patterns&lt;br&gt;With all these methods at your disposal, you can do a lot of good. However, there are some things you should be careful about …&lt;/p&gt;
&lt;p&gt;Extracting for the sake of having short functions&lt;br&gt;Some people advocate the use of tiny tiny functions, and if you extract everything out, that’s what you can get. However, this can detrimentally affect how easy the code is to understand.&lt;/p&gt;
&lt;p&gt;For example, imagine you’re debugging some code. You look in function a(). Then, you find it uses b(), which then uses c(). And so on.&lt;/p&gt;
&lt;p&gt;While short functions can be great and easy to understand, if you’re only using the function in a single place, consider using the “replace expression with variable” method instead.&lt;/p&gt;
&lt;p&gt;Don’t force things&lt;br&gt;As usual, there’s no absolute right way to do this. Therefore, if something doesn’t seem like it’s a good idea, don’t try to force it.&lt;/p&gt;
&lt;p&gt;Conclusion&lt;br&gt;Making your code self documenting goes a long way to improving the maintainability of your code. Every comment is additional cruft that has to be maintained, so eliminating comments where possible is a good thing.&lt;/p&gt;
&lt;p&gt;However, self-documenting code doesn’t replace documentation or comments. For example, code is limited in expressing intent, so you need to have good comments as well. API documentation is also very important for libraries, as having to read the code is not feasible unless your library is very small.&lt;/p&gt;
&lt;p&gt;待续~~~&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;原文:&lt;a href=&quot;https://www.sitepoint.com/self-documenting-javascript/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.sitepoint.com/self-documen
    
    </summary>
    
      <category term="技术" scheme="http://jguang.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>思考的要诀——读书笔记</title>
    <link href="http://jguang.top/2016/06/17/%E6%80%9D%E8%80%83%E7%9A%84%E8%A6%81%E8%AF%80(3)/"/>
    <id>http://jguang.top/2016/06/17/思考的要诀(3)/</id>
    <published>2016-06-16T16:00:00.000Z</published>
    <updated>2016-06-21T05:52:14.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/xx.jpg&quot; alt=&quot;sikaodeyaojue&quot;&gt;&lt;/p&gt;
&lt;p&gt;看过作者此人，你一定被他的态度和惬意生活所吸引，就像调侃朋友圈所说『你以为他很幸福，他以为你很幸福，其实自己却不感觉很幸福』大家都在追求『朋友圈』的幸福；松浦的生活是大家共同追求的幸福；在这个快节凑、风火如冰的城市，一个大叔这么慢条斯理的给你煮咖啡、温润如玉待人待物，不得不让人如沐春风。&lt;/p&gt;
&lt;p&gt;要追求如此『幸福生活』松浦有一系列方法和做事接凑；此书就是针对工作上告诉你如何幸福的完成工作并用工作成就小我;&lt;/p&gt;
&lt;h2 id=&quot;思考术&quot;&gt;&lt;a href=&quot;#思考术&quot; class=&quot;headerlink&quot; title=&quot;思考术&quot;&gt;&lt;/a&gt;思考术&lt;/h2&gt;&lt;p&gt;要工作必须进行思考，此思考不是你胡思乱想而是专门作为一个工作任务独立抽出时间进行思考; 切要放空自己不要依赖搜索引擎，作者认为知识越多思考越难；思考过程中要学会记录，把思考的无形的东西转化为有形的描述，从记录中挖掘创意；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一开始排在同一列的思考片段，其中又一些结合成为创意的开端。看这白纸，就能指导自己应该深入挖掘的地方。这一连串的工作是思考的基本流程，也是训练。这样的事情我每天都不间断的训练&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;思考创意点子要又多个方案，选择自认为最纯粹的点子而不是最完美的点子；初始的点子要让它迅速茁壮成长。&lt;/p&gt;
&lt;p&gt;面对灵感枯竭问题可以出去走走，不要做特别剧烈运动建议走路放空自己重新思考。&lt;/p&gt;
&lt;p&gt;思考到最后当形成方案时应该是最优的，不要把未完成的方案给予众人去看；&lt;/p&gt;
&lt;h2 id=&quot;想象术&quot;&gt;&lt;a href=&quot;#想象术&quot; class=&quot;headerlink&quot; title=&quot;想象术&quot;&gt;&lt;/a&gt;想象术&lt;/h2&gt;&lt;p&gt;思考产生的创意要运用到工作中是需要靠『想象力』；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;思考，是在自己的世界中进行的活动，工作，侧是再社会中进行的行为，连接自己语社会的桥梁，不正是想象力吗；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此想象和思考是不一样的，思考是自己的构思方案，想象是让完善此方案。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;换位思考&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;和客户『恋爱』的感觉猜想客户；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;认真做好眼前的事情，而不要好高骛远。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;超越自己&quot;&gt;&lt;a href=&quot;#超越自己&quot; class=&quot;headerlink&quot; title=&quot;超越自己&quot;&gt;&lt;/a&gt;超越自己&lt;/h2&gt;&lt;p&gt;最后作者依『超越过界』为目标来鞭策自己，人需要不断超越现在的自己，锻炼自己、提高自己使其适应未来多变的『地球村』；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在工作上要依经营者的意识去思考工作，学会独立思考完成工作不要过度依靠团队和公司流程；&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这是一个没有成果就没有正面评价的严峻时代。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;学会花钱进修自己，作者特别说明了要学习语言。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;钱花了就会认真，反过来，不花钱，就不会认真。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;面对全球化，大家不应该一致追求同质，而应该保持个性。把自己的个性运用到工作中，是自己有优越感进而更加幸福。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此书反复看了几遍，还是很实用的 特别是最近遇到的一些事情，最后的『这是一个没有成果就没有正面评价的严峻时代』深有感触。&lt;br&gt;。&lt;/p&gt;
&lt;p&gt;最后一句话总结和鞭策自己：”有条理和目的的进行多思多想，认清自己、完善自己，认真做好眼前的『苟且』，在工作中寻找『田野』”&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/xx.jpg&quot; alt=&quot;sikaodeyaojue&quot;&gt;&lt;/p&gt;
&lt;p&gt;看过作者此人，你一定被他的态度和惬意生活所吸引，就像调侃朋友圈所说『你以为他很幸福，他以为你很幸福，其实自己却不感觉很幸福』大家都在追求『朋友圈』的幸福；松浦的生活是
    
    </summary>
    
      <category term="读书" scheme="http://jguang.top/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>思考的要诀——松浦弥太郎</title>
    <link href="http://jguang.top/2016/06/13/%E6%80%9D%E8%80%83%E7%9A%84%E8%A6%81%E8%AF%80(2)/"/>
    <id>http://jguang.top/2016/06/13/思考的要诀(2)/</id>
    <published>2016-06-12T16:00:00.000Z</published>
    <updated>2016-06-14T00:20:55.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/sp.jpg&quot; alt=&quot;sikaodeyaojue&quot;&gt;&lt;/p&gt;
&lt;p&gt;这两天在『人肉』松浦弥太郎, 这个高中叛逆缀学，后面追求惬意生活并用生活方式和道理养活自己的文艺中年大叔，就是现在白领文艺范青年的模范；&lt;/p&gt;
&lt;p&gt;看看如下文艺范晒的是不是拉朋友圈晒的n条圈了；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.cpcdn.com/life_article_photo/276/860x660c/4143b3443aa0e693bb0ac9b3acd644f1.jpg?p:1462779591&quot; alt=&quot;life&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://www.kurashi-no-techo.co.jp/images/DSC_0053-1.jpg&quot; alt=&quot;life&quot;&gt;&lt;/p&gt;
&lt;p&gt;关键是人家还制成了视频&lt;a href=&quot;https://kurashi-no-kihon.com/articles/276-%E6%9C%9D%E3%81%AE%E3%81%8A%E3%81%AF%E3%81%AA%E3%81%97%E3%80%82%E6%9C%9D%E3%81%A0%E3%81%91%E9%99%90%E5%AE%9A%E3%81%A7%E3%81%99%E3%80%82%E3%81%8A%E3%81%AF%E3%82%88%E3%81%86%E3%81%95%E3%82%93-%EF%BC%94&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;手戳&lt;/a&gt;,&lt;a href=&quot;https://kurashi-no-kihon.com/articles/282-%E3%81%8D%E3%81%BB%E3%82%93%E3%81%AE%E3%83%95%E3%83%AB%E3%83%BC%E3%83%84%E3%83%9C%E3%82%A6%E3%83%AB%E3%83%95%E3%83%AB%E3%83%BC%E3%83%84%E3%81%AE%E6%9C%9D%E3%81%94%E3%81%AF%E3%82%93&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;手戳&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于更多介绍就Google吧，下面引用muji的&lt;a href=&quot;http://www.muji.com/cn/compactlife/column001.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;营造惬意生活的智慧&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;自己专有的尺度感&quot;&gt;&lt;a href=&quot;#自己专有的尺度感&quot; class=&quot;headerlink&quot; title=&quot;自己专有的尺度感&quot;&gt;&lt;/a&gt;自己专有的尺度感&lt;/h3&gt;&lt;p&gt;作家兼编辑的松浦弥太郎，在担任《生活手帖》总编的约9年间大显身手，之后转职于cookpad公司，『生活的基本』现在作为《生活的基本》网站策划人，致力于弘扬“生活的智慧与学习”。&lt;/p&gt;
&lt;p&gt;松浦一直以来通过随笔及媒体宣传的是，认真思考有益于生活的技巧。这时似乎就已埋下了与Compact Life理念一脉相通的伏笔。&lt;/p&gt;
&lt;p&gt;“重要的是拥有自己专有的尺度感。只要有了这个尺度感，那么自己需要什么不需要什么自然一目了然。究竟应该拥有多少物品，究竟需要购买什么物品？为营造惬意的生活，必须自己切实对与衣食住相关的物品进行总体性的把握”。&lt;/p&gt;
&lt;p&gt;松浦于2002年开业的“COWBOOKS”书店，主要经营二手书。虽说名叫书店，但店里仅仅是两边依墙摆满书架，中间仅仅放着一张大书桌和数把椅子的宽松空间。与普通的书店或旧书店相比，虽然书的数量有限，但却是松浦本人精心挑选的书籍。&lt;/p&gt;
&lt;p&gt;“因为这是一家个人商店，若不是能够打动自己的书，我就不会不负责任地推荐给顾客。所以这里只摆着基于我本人价值观的书。换句话说这里只有符合我个人尺度感的书”。&lt;/p&gt;
&lt;p&gt;简单而理性的规则&lt;/p&gt;
&lt;p&gt;虽说如此，但究竟什么是必要的，什么是不必要的，许多人却难以甄选。松浦对此提出了如下建议，即“通观整体的平衡”及“分出优先顺序”。&lt;/p&gt;
&lt;p&gt;“假设想要买某件东西，那么先考虑一下究竟那件东西是否与现在的自己相配。这一点很重要。例如，20多岁的人却戴着高级手表，我感觉也许这就会给人带来不符合身份的印象，等到多积累一些人生的经验之后再佩戴也不晚。同样，假设开始在单间公寓生活，那么只要在房间里摆放恰到好处的物品就可以了。如果想非要摆一套高级沙发，那么就应该以拥有与高级沙发相配的宽敞房间为生活目标努力奋斗”。&lt;/p&gt;
&lt;p&gt;再拿个人服装为例，5件衬衫、5条短裤、10双袜子……只要事先定好这些数量上限，那么就不至于犹豫什么是必要的，什么是不必要的了。&lt;/p&gt;
&lt;p&gt;“虽然硬挤也能塞下10件衬衫，但大可不必那么勉强，干脆就按自己的决定精选足够穿用的5件。就好像吃饭一样，吃到八分饱才是恰到好处。我觉得这并不是品味意识高低的问题，而是任何人都可能拥有的简单而理性的思考方式”。&lt;/p&gt;
&lt;p&gt;拥有自己专有的尺度感，关联到个人的自立，就是能够客观地审视自己的周围，并与他人保持适当的距离感。只要自己严格制定了规则，无论是自己独处还是和家人一起，都能开启心情舒畅的生活。&lt;/p&gt;
&lt;h3 id=&quot;追求适于自己的惬意&quot;&gt;&lt;a href=&quot;#追求适于自己的惬意&quot; class=&quot;headerlink&quot; title=&quot;追求适于自己的惬意&quot;&gt;&lt;/a&gt;追求适于自己的惬意&lt;/h3&gt;&lt;p&gt;生活”并不是非得拥有堆积如山的物品，营造让自己自由的空间，并度过惬意的时光，这就是松浦对生活的定义。“休息天的早晨，和煦的阳光穿窗洒来，照射在空旷的墙壁和地板上，心中感到无比惬意。这种感觉才应该是最重要的。反过来说，我们不想让周围的环境妨碍我们看到这样美好的光景，不需要遮住窗户、挡住阳光的物品。只有空旷的空间才能让人感到舒畅”。&lt;/p&gt;
&lt;p&gt;松浦讲起童年时代关于窗户的回忆。在只有四个半榻榻米大小的陈旧家中，全家人生活得很和睦。虽然谈不上富裕，但有一点却是值得骄傲的“生活的智慧”。&lt;/p&gt;
&lt;p&gt;“妈妈每天都要擦玻璃。所以只有我们家的窗玻璃总是一尘不染晶莹透亮。正是因为这样，家里总是充满阳光。我觉得其实富裕的生活就应该是这样的”。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/sp.jpg&quot; alt=&quot;sikaodeyaojue&quot;&gt;&lt;/p&gt;
&lt;p&gt;这两天在『人肉』松浦弥太郎, 这个高中叛逆缀学，后面追求惬意生活并用生活方式和道理养活自己的文艺中年大叔，就是现在白领文艺范青年的模范；&lt;/p&gt;
&lt;p&gt;看看如下文艺范
    
    </summary>
    
      <category term="读书" scheme="http://jguang.top/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>思考的要诀——工作</title>
    <link href="http://jguang.top/2016/06/12/%E6%80%9D%E8%80%83%E7%9A%84%E8%A6%81%E8%AF%80(1)/"/>
    <id>http://jguang.top/2016/06/12/思考的要诀(1)/</id>
    <published>2016-06-11T16:00:00.000Z</published>
    <updated>2016-06-12T23:49:19.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/sikaodeyaojue.jpg&quot; alt=&quot;sikaodeyaojue&quot;&gt;&lt;/p&gt;
&lt;p&gt;向来对鸡汤文章比较反感，最近由于思想变故比较多就再豆瓣的推荐下买了本《思考的要诀》来看看，其实最吸引我的是副标题《松浦太郎的幸福工作术》&lt;/p&gt;
&lt;p&gt;书很简单，文字也很好读，估计半天就『浏览』完了。真的『浏览』完之后回味起来你会感觉此书好废话，每个篇章很啰嗦的再讲一个很简单的道理；但也越来越佩服写书的人，能把道理废话成一本书确实厉害。再深入回味又感觉此书不适合『浏览』因为太啰嗦而忘记了到底再说啥O(∩_∩)O~。&lt;/p&gt;
&lt;p&gt;于是又慢慢看看此书，确实获取了些信息；&lt;/p&gt;
&lt;h2 id=&quot;关于作者&quot;&gt;&lt;a href=&quot;#关于作者&quot; class=&quot;headerlink&quot; title=&quot;关于作者&quot;&gt;&lt;/a&gt;关于作者&lt;/h2&gt;&lt;p&gt;请原谅我读书少，真的才知道此人，检索了一遍真的很有意思对此人、此人办的事、此人写的书、此人的经历，下一篇再详述检索的点滴。&lt;/p&gt;
&lt;h2 id=&quot;此书的序&quot;&gt;&lt;a href=&quot;#此书的序&quot; class=&quot;headerlink&quot; title=&quot;此书的序&quot;&gt;&lt;/a&gt;此书的序&lt;/h2&gt;&lt;p&gt;还是读书少，写此序的人是个台湾也很有名的人物——韩良露；看他写的台北&lt;a href=&quot;http://www.wtoutiao.com/p/U4fRS1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《韩良露：台北的魅力》&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;台北幅围与人口不大不小，故无超级大都会的紧张与压力，东京、纽约的城市节奏让人喘不过气。但台北也不会小到让居民感到无聊或沉闷。台北是适中城市，如巴黎，城市的大小让居民彼此易于交往。在巴黎或台北要探视父母与亲戚往来，和好友聚餐，大家都好安排，不像在洛杉矶或北京，城市大到人们必须相忘于江湖，城市会因距离的疏远而疏离。&lt;/p&gt;
&lt;p&gt;台北温罗汀、康青龙街区的独立咖啡馆让人惊叹，几乎三五步就有一家，让香港、澳门、新加坡、吉隆坡、上海、北京等地迷恋咖啡馆的旅人恨不得能在台北待上半年天天上不同的咖啡馆。台北的独立咖啡馆很有文化脑容量，店内会有小架摆放城里各种或主流或边缘的文化活动手册，店内常设主人自己的书架，放置的书常比金鼎奖出版品更具文史哲品味，旅人如有一双默默聆听的耳朵，独立咖啡馆内的话题也都很文艺，更有特色的是开店的主人，都有自己的人生想法，和他们谈话，往往比和心理医生或牧师更让人有所领悟。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;关于工作&quot;&gt;&lt;a href=&quot;#关于工作&quot; class=&quot;headerlink&quot; title=&quot;关于工作&quot;&gt;&lt;/a&gt;关于工作&lt;/h2&gt;&lt;p&gt;最近也有人问『你感觉什么样的工作比较舒服』，此书的序正好对此有了完美的解答：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;依热情为出发点，把好玩的生活转化为工作的创意，重视个体的自由与真诚，不必牺牲小我来成就大我，而是提升小我来为大我服务……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是不是此话确实很直透内心， 还有&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;工作不是为了自我成就(self-made),而是为了自我转化(self-transforme),工作是更进化的自我，更有意义的社会和更高的生命目标链接的平台；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还有更好的，那就是作者写的前言&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;所谓工作，并不是完成许多事、加快速度，或是迎头赶上什么。而是打造出自己的模式，让自己每一天都能保持高质量、乐在其中、不勉强的工作状态。而且，重要的是，不去追求世间一般所谓应该如此这般的理想，而是自己一一下功夫、一一发现保有自我的工作方法，一边谋求与大环境的调和，一边将它琢磨得更好。&lt;/p&gt;
&lt;p&gt;现在这个时代，在工作上，比起花了多少“时间”或完成多少“量”，更应该追求“质”，也就是“事情应该怎么做”。我想，每个人在想把工作做好、想要贡献社会等心态上，应该有更多的坚持和不受拘束。为了达到这个目的，我们应该学习些什么？我认为，其中之一就是“思考的要诀”。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对作者、写序的人和前言仔细看完，对此书文字又可继续斟酌；&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/sikaodeyaojue.jpg&quot; alt=&quot;sikaodeyaojue&quot;&gt;&lt;/p&gt;
&lt;p&gt;向来对鸡汤文章比较反感，最近由于思想变故比较多就再豆瓣的推荐下买了本《思考的要诀》来看看，其实最吸引我的是副标题《松浦太郎的幸福工作术》&lt;/p&gt;
    
    </summary>
    
      <category term="读书" scheme="http://jguang.top/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>写</title>
    <link href="http://jguang.top/2016/06/07/%E5%86%99/"/>
    <id>http://jguang.top/2016/06/07/写/</id>
    <published>2016-06-06T16:00:00.000Z</published>
    <updated>2016-06-07T07:23:27.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/write.jpg&quot; alt=&quot;write&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;想写写&quot;&gt;&lt;a href=&quot;#想写写&quot; class=&quot;headerlink&quot; title=&quot;想写写&quot;&gt;&lt;/a&gt;想写写&lt;/h2&gt;&lt;p&gt;年快过30，少了折腾的心情，可脑子和手都痒，又懒着动嘴就只能想写写了；&lt;/p&gt;
&lt;h2 id=&quot;平台&quot;&gt;&lt;a href=&quot;#平台&quot; class=&quot;headerlink&quot; title=&quot;平台&quot;&gt;&lt;/a&gt;平台&lt;/h2&gt;&lt;p&gt;扒开了github，原本申请的域名 jguang.top早 CNAME 到了这里， 把原来流水式的东西都挪动了一下，早知道hexo 很受大家推崇，开始折腾了下；&lt;/p&gt;
&lt;h2 id=&quot;Hexo&quot;&gt;&lt;a href=&quot;#Hexo&quot; class=&quot;headerlink&quot; title=&quot;Hexo&quot;&gt;&lt;/a&gt;Hexo&lt;/h2&gt;&lt;p&gt;Hexo 确实很『爽』，把原来Day-one上的几篇东西移了过来； 最后发现 &lt;code&gt;hexo d&lt;/code&gt; 的过程中把原来的都给冲掉了，最后又&lt;code&gt;git push origin master --force&lt;/code&gt;强推了回去；&lt;/p&gt;
&lt;p&gt;找个简单最简单的Theme，自己有时间再重构吧；&lt;/p&gt;
&lt;h2 id=&quot;学习写东西了&quot;&gt;&lt;a href=&quot;#学习写东西了&quot; class=&quot;headerlink&quot; title=&quot;学习写东西了&quot;&gt;&lt;/a&gt;学习写东西了&lt;/h2&gt;&lt;p&gt;&lt;code&gt;试着写 -&amp;gt; 学写 -&amp;gt; 写&lt;/code&gt; 最后的目的是能够给小暖辅导作文 O(∩_∩)O~；&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/write.jpg&quot; alt=&quot;write&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;想写写&quot;&gt;&lt;a href=&quot;#想写写&quot; class=&quot;headerlink&quot; title=&quot;想写写&quot;&gt;&lt;/a&gt;想写写&lt;/h2&gt;&lt;p&gt;年快过30，少了折腾的心情，可脑子
    
    </summary>
    
      <category term="日志" scheme="http://jguang.top/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>决绝</title>
    <link href="http://jguang.top/2016/05/31/%E5%86%B3%E7%BB%9D/"/>
    <id>http://jguang.top/2016/05/31/决绝/</id>
    <published>2016-05-30T16:00:00.000Z</published>
    <updated>2016-06-07T05:33:22.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/one.jpg&quot; alt=&quot;jinhua&quot;&gt;&lt;/p&gt;
&lt;p&gt;人其实需要自己想通才能通，平时常常看到不要犹豫、不要优柔寡断等等鸡汤；读起来都很收益但真正遇到些事情的时候却把道理都扔的远远的；&lt;/p&gt;
&lt;p&gt;就相当于前几天掰扯勾三股四等等三角函数，道理学会了但真正遇到了却无法联系到如何用，只有真正遇到了问题自己揣摩其中道理一点点搞明白才恍然大悟；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.twword.com/uploads/wiki/33/9e/23085_0.jpg&quot; alt=&quot;sina&quot;&gt;&lt;/p&gt;
&lt;p&gt;周六日回家，白沟有个土豪生了个孙子让后开始大办酒席、搭台唱戏；人一生太短，有钱人和无钱人都会为了得一个子孙闹的家不家，富而不富，终其目的都是为了家庭和谐、人生太平；&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://manage.gl.gov.cn/system_dntb/upload_new/2011/03/201182417245541.jpg&quot; alt=&quot;jia&quot;&gt;&lt;/p&gt;
&lt;p&gt;多些痛快的决绝，为自己和目的而活！！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/one.jpg&quot; alt=&quot;jinhua&quot;&gt;&lt;/p&gt;
&lt;p&gt;人其实需要自己想通才能通，平时常常看到不要犹豫、不要优柔寡断等等鸡汤；读起来都很收益但真正遇到些事情的时候却把道理都扔的远远的；&lt;/p&gt;
&lt;p&gt;就相当于前几天掰扯勾三股四等等三角
    
    </summary>
    
      <category term="日志" scheme="http://jguang.top/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>进化</title>
    <link href="http://jguang.top/2016/02/24/%E8%BF%9B%E5%8C%96/"/>
    <id>http://jguang.top/2016/02/24/进化/</id>
    <published>2016-02-23T16:00:00.000Z</published>
    <updated>2016-06-07T05:31:12.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/renlei.jpg&quot; alt=&quot;jinhua&quot;&gt;&lt;/p&gt;
&lt;p&gt;在看很有意思的一本书《人类简史》赶脚其实应该叫《人类野史》或者《人类进化猜想》&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img3.douban.com/lpic/s27814883.jpg&quot; alt=&quot;asdf&quot;&gt;&lt;/p&gt;
&lt;p&gt;可能因为翻译的怨过文字段落都很长，但有些片段的猜想确实颠覆人生世界观，看起来很有趣；&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;十万年前，地球上至少有六种不同的人&lt;br&gt;但今日，世界舞台为什么只剩下了我们自己？&lt;br&gt;从只能啃食虎狼吃剩的残骨的猿人，到跃居食物链顶端的智人，&lt;br&gt;从雪维洞穴壁上的原始人手印，到阿姆斯壮踩上月球的脚印，&lt;br&gt;从认知革命、农业革命，到科学革命、生物科技革命，&lt;br&gt;我们如何登上世界舞台成为万物之灵的？&lt;br&gt;从公元前1776年的《汉摩拉比法典》，到1776年的美国独立宣言，&lt;br&gt;从帝国主义、资本主义，到自由主义、消费主义，&lt;br&gt;从兽欲，到物欲，从兽性、人性，到神性，&lt;br&gt;我们了解自己吗？我们过得更快乐吗？&lt;br&gt;我们究竟希望自己得到什么、变成什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一切都在进化，所向[无敌]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;无敌是多么 多么寂寞&lt;br&gt;无敌是多么 多么空虚&lt;br&gt;独自在顶峰中 冷风不断的吹过&lt;br&gt;我的寂寞 谁能明白我&lt;br&gt;无敌是多么 多么寂寞&lt;br&gt;无敌是多么 多么空虚&lt;br&gt;躲在天边的她 可不可听我诉说&lt;br&gt;我的寂寞 无尽的寂寞&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;时间&quot;&gt;&lt;a href=&quot;#时间&quot; class=&quot;headerlink&quot; title=&quot;时间&quot;&gt;&lt;/a&gt;时间&lt;/h2&gt;&lt;p&gt;时间在向前推移任何物种也在改变，现在你所看到的不变只是相对来说的，历史长河太长，你的生命过程已经可以忽略不计；&lt;/p&gt;
&lt;h2 id=&quot;本性&quot;&gt;&lt;a href=&quot;#本性&quot; class=&quot;headerlink&quot; title=&quot;本性&quot;&gt;&lt;/a&gt;本性&lt;/h2&gt;&lt;p&gt;人其实是个动物，高级动物；&lt;/p&gt;
&lt;p&gt;原来人们为一个『小兔子』挣的你死我活，现在人们为了『一块钱』挣的脸红脖子粗其本质是不变的；&lt;/p&gt;
&lt;p&gt;原来人们吃到了『兔子肉』就感觉很幸福了，现在人们住上了『大房子』也紧紧是同样的幸福；&lt;/p&gt;
&lt;h2 id=&quot;规则&quot;&gt;&lt;a href=&quot;#规则&quot; class=&quot;headerlink&quot; title=&quot;规则&quot;&gt;&lt;/a&gt;规则&lt;/h2&gt;&lt;p&gt;人光光而来，灰灰而去，不带走一片尘埃；&lt;/p&gt;
&lt;p&gt;所有的规则都是人们制定的，人活在了不同『族群』下受到了此族群规则的限制，什么神、国、法律等等都是为某个族群为了统治自己的地界而一定时间的产物；&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/renlei.jpg&quot; alt=&quot;jinhua&quot;&gt;&lt;/p&gt;
&lt;p&gt;在看很有意思的一本书《人类简史》赶脚其实应该叫《人类野史》或者《人类进化猜想》&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img3.douban.com/lpic/s
    
    </summary>
    
      <category term="日志" scheme="http://jguang.top/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>能看见并不一定是真的</title>
    <link href="http://jguang.top/2016/02/22/%E7%9C%8B%E8%A7%81/"/>
    <id>http://jguang.top/2016/02/22/看见/</id>
    <published>2016-02-21T16:00:00.000Z</published>
    <updated>2016-06-07T05:29:12.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/kanjian.jpg&quot; alt=&quot;oneday&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;看见——『孩子』内心&quot;&gt;&lt;a href=&quot;#看见——『孩子』内心&quot; class=&quot;headerlink&quot; title=&quot;看见——『孩子』内心&quot;&gt;&lt;/a&gt;看见——『孩子』内心&lt;/h2&gt;&lt;p&gt;昨天看柴静老师的《看见——双城的创伤》内心触动挺大，读完文字回忆神经像来紧的发条似乎要崩裂；&lt;/p&gt;
&lt;p&gt;十三四岁大概是初中阶段，金钱的猛兽开始狂虐每个人家庭，农村在这个背景下都勤奋的操劳着老老小小，父母缺少教育对他们来说给家庭住上好房子、吃上好饭、比别人过的好就是天天操劳的原因；&lt;/p&gt;
&lt;p&gt;对于孩子太缺少爱的呵护，很少同他们交流，孩子的思想已经不像父母同年龄时那样只要吃饱就行的单纯思想，同学及其同伴之间受哥们义气、朋友义气渲染觉得比什么都重要，像小孩子的一句话『我不给你玩了』都能深受打击；&lt;/p&gt;
&lt;p&gt;单纯思想变成了复杂感情思想但又对外边世界缺乏认识和探索，每个人都活在自己巨小的世界里，稍微受到点打击就有可能产生无法原谅的结局；&lt;/p&gt;
&lt;p&gt;成为爸爸后对孩子的文章越来越敏感，时刻警惕着应该如何教育孩子——多陪、多内心交流、多带孩子去看外边世界；&lt;/p&gt;
&lt;h2 id=&quot;保险&quot;&gt;&lt;a href=&quot;#保险&quot; class=&quot;headerlink&quot; title=&quot;保险&quot;&gt;&lt;/a&gt;保险&lt;/h2&gt;&lt;p&gt;2.6号撞了车，造成自己一个多星期都内心不高兴的激素存在，慢反应的我一直在回想该怎么使其更好；&lt;br&gt;今天终于有了结果，吸取教训吧，同《看见》一样，在紧张的事情之中看到的及其第一反应的并不是真的，有可能有另一个结果，学会克制及其如何和社会人打交道；&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/kanjian.jpg&quot; alt=&quot;oneday&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;看见——『孩子』内心&quot;&gt;&lt;a href=&quot;#看见——『孩子』内心&quot; class=&quot;headerlink&quot; title=&quot;看见——『孩子』内心&quot;&gt;&lt;/a&gt;看见——
    
    </summary>
    
      <category term="日志" scheme="http://jguang.top/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>One day</title>
    <link href="http://jguang.top/2016/01/01/oneday/"/>
    <id>http://jguang.top/2016/01/01/oneday/</id>
    <published>2015-12-31T16:00:00.000Z</published>
    <updated>2016-06-07T05:29:09.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/images/Day one.jpg&quot; alt=&quot;oneday&quot;&gt;&lt;/p&gt;
&lt;p&gt;2016进入新的征途与环境&lt;/p&gt;
&lt;p&gt;加油！！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;身体&lt;/li&gt;
&lt;li&gt;家庭&lt;/li&gt;
&lt;li&gt;学习&lt;/li&gt;
&lt;li&gt;工作&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/Day one.jpg&quot; alt=&quot;oneday&quot;&gt;&lt;/p&gt;
&lt;p&gt;2016进入新的征途与环境&lt;/p&gt;
&lt;p&gt;加油！！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;身体&lt;/li&gt;
&lt;li&gt;家庭&lt;/li&gt;
&lt;li&gt;学习&lt;/li&gt;
&lt;li&gt;工作&lt;/li&gt;
&lt;/
    
    </summary>
    
      <category term="日志" scheme="http://jguang.top/categories/%E6%97%A5%E5%BF%97/"/>
    
    
  </entry>
  
  <entry>
    <title>测试</title>
    <link href="http://jguang.top/2011/01/01/test/"/>
    <id>http://jguang.top/2011/01/01/test/</id>
    <published>2010-12-31T16:00:00.000Z</published>
    <updated>2016-06-07T08:42:54.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;JSON-stringify和JSON-parse&quot;&gt;&lt;a href=&quot;#JSON-stringify和JSON-parse&quot; class=&quot;headerlink&quot; title=&quot;JSON.stringify和JSON.parse&quot;&gt;&lt;/a&gt;JSON.stringify和JSON.parse&lt;/h1&gt;&lt;p&gt;用来json和string互相转化，在数据交换中常用到；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;JSON.stringify(value [, replacer] [, space])
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;主要说的是第二个参数为转换结果的函数或者数组&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数组&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; contact = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;contact.firstname = &lt;span class=&quot;string&quot;&gt;&quot;Jesper&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;contact.surname = &lt;span class=&quot;string&quot;&gt;&quot;Aaberg&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;contact.phone = [&lt;span class=&quot;string&quot;&gt;&quot;555-0100&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;555-0120&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; memberfilter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;memberfilter[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&quot;surname&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;memberfilter[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&quot;phone&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; jsonText = &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(contact, memberfilter, &lt;span class=&quot;string&quot;&gt;&quot;\t&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(jsonText);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Output:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#123; &quot;surname&quot;: &quot;Aaberg&quot;, &quot;phone&quot;: [ &quot;555-0100&quot;, &quot;555-0120&quot; ] &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;函数：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; continents = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;continents[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&quot;Europe&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;continents[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&quot;Asia&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;continents[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&quot;Australia&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;continents[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&quot;Antarctica&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;continents[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&quot;North America&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;continents[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&quot;South America&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;continents[&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&quot;Africa&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; jsonText = &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(continents, replaceToUpper);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;replaceToUpper&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;key, value&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value.toString().toUpperCase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//Output:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &quot;EUROPE,ASIA,AUSTRALIA,ANTARCTICA,NORTH AMERICA,SOUTH AMERICA,AFRICA&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一个特殊用法把json里面的函数也格式化为json串&lt;/p&gt;
&lt;p&gt;  var ss = {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;aa&amp;quot;:&amp;quot;bbb&amp;quot;,
&amp;quot;bb&amp;quot;:function(){console.log(&amp;quot;3333&amp;quot;)}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  }&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;把上面对象字符串话其方法也一块传输过去;自然想到JSON.stringify;&lt;/p&gt;
&lt;p&gt;但stringify会过滤值为函数的key自然想到其第二个参数所以可以&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;JSON.stringify(ss,function(key,val){
    console.log(key,&amp;quot;===&amp;quot;,val);
    if(typeof val ===&amp;quot;function&amp;quot;){
        return val.toString();
    }else{
        return val;
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输出结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; === Object {aa: &amp;quot;bbb&amp;quot;, bb: function}
aa === bbb
bb === function (){console.log(&amp;quot;3333&amp;quot;)}
&amp;quot;{&amp;quot;aa&amp;quot;:&amp;quot;bbb&amp;quot;,&amp;quot;bb&amp;quot;:&amp;quot;function (){console.log(\&amp;quot;3333\&amp;quot;)}&amp;quot;}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看结果知道调用函数的次数为对象原属性值个数+1;&lt;/p&gt;
&lt;p&gt;对于数据传输之后如何解析可以用下面的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;JSON.parse(text [, reviver])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;学习的主要是第二个参数&lt;/p&gt;
&lt;p&gt;官方例子&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var jsontext = &amp;apos;{ &amp;quot;hiredate&amp;quot;: &amp;quot;2008-01-01T12:00:00Z&amp;quot;, &amp;quot;birthdate&amp;quot;: &amp;quot;2008-12-25T12:00:00Z&amp;quot; }&amp;apos;;
var dates = JSON.parse(jsontext, dateReviver);
document.write(dates.birthdate.toUTCString());

function dateReviver(key, value) {
    var a;
    if (typeof value === &amp;apos;string&amp;apos;) {
        a = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
        if (a) {
            return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
                            +a[5], +a[6]));
        }
    }
    return value;
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;反转上面的值：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var dddd = JSON.parse(dd,function(key,val){
    console.log(key,&amp;quot;===&amp;quot;,val);//也调用n+1次,最后key为“ ”；
    if(val&amp;amp;&amp;amp;val.indexOf&amp;amp;&amp;amp;val.indexOf(&amp;apos;function&amp;apos;)&amp;gt;=0){
         return new Function(&amp;quot;return &amp;quot;+val)();
    }else{
        return val;
    }

});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aa === bbb VM3687:3
bb === function (){console.log(&amp;quot;3333&amp;quot;)} VM3687:3
 === Object {aa: &amp;quot;bbb&amp;quot;, bb: function}

Object {aa: &amp;quot;bbb&amp;quot;, bb: function}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://msdn.microsoft.com/zh-cn/library/ie/cc836459(v=vs.94).aspx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://msdn.microsoft.com/zh-cn/library/ie/cc836459(v=vs.94).aspx&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JSON-stringify和JSON-parse&quot;&gt;&lt;a href=&quot;#JSON-stringify和JSON-parse&quot; class=&quot;headerlink&quot; title=&quot;JSON.stringify和JSON.parse&quot;&gt;&lt;/a&gt;JSON.string
    
    </summary>
    
    
  </entry>
  
</feed>
